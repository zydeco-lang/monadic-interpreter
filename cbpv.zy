// A monad structure
codata Monad (M: VType -> CType) where
  | .return(): forall (A: VType) . A -> M A
  | .bind(): forall (A: VType) (A': VType) . U (M A) -> U (A -> M A') -> M A'
end

// A monad structure that supports fail
codata MonadErr (M: VType -> CType) where
  | .fail(): forall (A: VType) . Exception -> M A
end

// A monad structure that supports print
codata MonadPrint (M: VType -> CType) where
  | .print(): String -> M Unit
end

codata MonadReduce (M: VType -> CType) where
  | .reduce(): forall (A: VType) . List (U (M A)) -> U (M A) -> M A
end

codata MonadTrans (T: (VType -> CType) -> VType -> CType) where
  | .lift(): forall (M: VType -> CType) (A: VType) . U (Monad M) -> U (M A) -> T M A
end

// An algebra structure that supports fail
codata Algebra (M: VType -> CType) (B: CType) where
  | .bindA(): forall (A: VType) . U (M A) -> U (A -> B) -> B
end

// An algebra structure that supports fail
codata AlgebraErr (M: VType -> CType) (B: CType) where
  | .failA(): Exception -> B
end

data Exception where
  | ParseError(Int, String)
  | FreeVariable()
  | TypeError()
end

// Continuation-based error monad
codata MExnOS (A: VType) where
  | .run(): U (A -> OS) -> U (Exception -> OS) -> OS
end

def fn mexn : Monad MExnOS =
  comatch
  | .return() -> fn A a ->
    comatch
    | .run() -> fn ka _ -> ! ka a
    end
  | .bind() -> fn A A' m f ->
    comatch
    | .run() -> fn ka ke ->
      ! m .run() { fn a -> ! f a .run() ka ke } { fn e -> ! ke e }
    end
  end
end

def fn mexn-err : MonadErr MExnOS =
  comatch
  | .fail() -> fn A e ->
    comatch
    | .run() -> fn _ ke -> ! ke e
    end
  end
end

def fn mexn-print : MonadPrint MExnOS =
  comatch
  | .print() -> fn s ->
    comatch
    | .run() -> fn ka _ ->
      ! write_line s { ! ka Unit() }
    end
  end
end

def fn mexn-reduce : MonadReduce MExnOS =
  comatch
  | .reduce() -> fn A ms m ->
    do m~ <- ! foldl @(U (MExnOS A)) @(U (MExnOS A)) ms {
      fn m' m -> ret {
        comatch
        | .run() -> fn ka ke ->
          ! m' .run() ka { fn _ -> ! m .run() ka ke }
        end
      }
    } m;
    ! m~
  end
end

codata StateT (S: VType) (M: VType -> CType) (A: VType) where
  | .run(): S -> M (Pair S A)
end

def fn state_t_monad (S: VType) (M: VType -> CType) (mo: U (Monad M)) : Monad (StateT S M) =
  comatch
  | .return() -> fn A a ->
    // goal: StateT S M A
    comatch
    | .run() -> fn s -> ! mo .return() @(Pair S A) Cons(s, a)
    end
  | .bind() -> fn A A' m f -> // m: U (StateT S M A), f: U (A -> StateT S M A')
    // goal: StateT S M A'
    comatch
    | .run() -> fn s ->
      ! mo .bind() @(Pair S A) @(Pair S A') { ! m .run() s } { fn sa ->
        match sa
        | Cons(s, a) -> ! f a .run() s
        end
      }
    end
  end
end

module Print where
  def fn print-value (v: Value) (kont: U OS) : OS =
    match v
    | Bool(b) -> ! if @(OS) b { ! write_str "true" kont } { ! write_str "false" kont }
    | Thunk(c) -> ! write_str "<thunk>" kont
    end
  end
  def fn print-trace (trace: Trace) (kont: U OS) : OS =
    let kont = { ! write_line "]" kont } in
    do kont <- ! foldl @(TraceItem) @(U OS) trace { fn t kont ->
      match t
      | App(sc) -> ret {
        ! write_str "  app" {
        ! write_line "," {
        ! kont
      } } }
      | Bind(x, sc) -> ret {
        ! write_str "  bind " {
        ! write_str x {
        ! write_line "," kont
      } } }
      end
    } kont;
    let kont = { ! write_line "[" kont } in
    ! kont
  end
end

data EnvT where
  | Empty()
  | Extend(String, Value, EnvT)
end

codata EnvO where
  | .lookup(): String -> Ret (Option Value)
  | .extend(): String -> Value -> EnvO
  | .print(): U OS -> OS
end

def rec fn envo (env: EnvT) : EnvO =
  comatch
  | .lookup() -> fn x ->
    match env
    | Empty() -> ret None()
    | Extend(x', v, env') ->
      do is-eq? <- ! str_eq x x';
      match is-eq?
      | True() -> ret Some(v)
      | False() -> ! envo env' .lookup() x
      end
    end
  | .extend() -> fn x v ->
    ! envo Extend(x, v, env)
  | .print() -> fn k ->
    ! write_line "[" {
      (rec (p : Thunk (EnvT -> OS)) -> fn env -> match env
      | Empty() -> ! write_line "]" k
      | Extend(x, v, env') ->
        ! write_str "  " {
        ! write_str x {
        ! write_str " = " {
        ! print-value v {
        ! write_line "," {
          ! p env'
        } } } } }
      end) env
    }
  end
end

data Value where
  | Bool(Bool)
  | Thunk(U Compu)
end

codata Compu where
  | .app(): Value -> Compu
  | .bind(): MExnOS Value
end

def rec fn malg : Algebra MExnOS Compu =
  comatch
  | .bindA() -> fn A m f -> // m : U (MExnOS A), f: U (A -> Compu)
    comatch
    | .app() -> fn a -> // goal: Compu
      ! malg .bindA() @(A) m { fn v -> ! f v .app() a }
    | .bind() -> // goal: MExnOS Value, use ordinary bind
      ! mexn .bind() @(A) @(Value) m { fn x -> ! f x .bind() }
    end
  end
end

def rec fn malg-err : AlgebraErr MExnOS Compu =
  comatch
  | .failA() -> fn e ->
    rec unwind -> comatch
    | .app() -> fn _ -> ! unwind
    | .bind() -> ! mexn-err .fail() @(Value) e
    end
  end
end

data SValue where
  | Var(String)
  | Bool(Bool)
  | Thunk(SCompu)
end

data SCompu where
  | Lam(String, SCompu)
  | App(SCompu, SValue)
  | Ret(SValue)
  | Bind(SCompu, String, SCompu)
  | Force(SValue)
  | If(SValue, SCompu, SCompu)
  | Env(SCompu)
end

/* Parser */

codata ParserInner where
  | .char(): Char -> MExnOS Char
  | .lpar(): MExnOS Unit
  | .rpar(): MExnOS Unit
  | .word(): String -> MExnOS String
  | .value(): MExnOS SValue
  | .compu_inner(): MExnOS SCompu
  | .compu(): MExnOS SCompu
end

alias Parser = String -> Int -> ParserInner end

pub def rec fn parse: Parser = fn s i ->
  comatch
  | .char() -> fn c ->
    ! if~ @(MExnOS Char) {
      do c' <- ! str_index s i;
      ! char_eq c' c
    } {
      ! mexn .return() @(Char) c
    } {
      do msg <- ! char_to_str c;
      do msg <- ! str_append "missing `" msg;
      do msg <- ! str_append msg "`";
      ! mexn-err .fail() @(Char) ParseError(i, msg)
    }
  | .lpar() ->
    ! mexn .bind() @(Char) @(Unit)
    { ! parse s i .char() '(' }
    { fn _ -> ! mexn .return() @(Unit) Unit() }
  | .rpar() ->
    ! mexn .bind() @(Char) @(Unit)
    { ! parse s i .char() ')' }
    { fn _ -> ! mexn .return() @(Unit) Unit() }
  | .word() -> fn w -> ! mexn .return() @(String) w
  | .value() ->
    ! mexn-reduce .reduce() @(SValue)
    Nil()
    { ! mexn-err .fail() @(SValue) ParseError(i, "computation parse error") }
  | .compu_inner() ->
    ! mexn-reduce .reduce() @(SCompu)
    Nil()
    { ! mexn-err .fail() @(SCompu) ParseError(i, "computation parse error") }
  | .compu() ->
    ! mexn .bind() @(Unit) @(SCompu) {
      ! parse s i .lpar()
    } { fn _ ->
      ! mexn .bind() @(SCompu) @(SCompu) {
        do i <- ! add i 1;
        ! parse s i .compu_inner()
      } { fn sc ->
        ! mexn .bind() @(Unit) @(SCompu) { ! parse s i .rpar() } {
          fn _ -> ! mexn .return() @(SCompu) sc
        }
      }
    }
  end
end

pub def fn parse_main (s: String) : MExnOS SCompu =
  ! parse s 0 .compu()
end

/* Interpretor */

data TraceItem where
  | App(SCompu)
  | Bind(String, SCompu)
end

alias Trace = List TraceItem end

codata Interp where
  | .value(): SValue -> MExnOS Value
  | .compu(): SCompu -> Compu
end

def rec fn interp (env: U EnvO) (trace: Trace) : Interp =
  comatch
  | .value() -> fn sv ->
    match sv
    | Var(x) ->
      do x? <- ! env .lookup() x;
      match x?
      | None() -> ! mexn-err .fail() @(Value) FreeVariable()
      | Some(v) ->
        ! mexn .return() @(Value) v
      end
    | Bool(b) ->
      ! mexn .return() @(Value) Bool(b)
    | Thunk(c) ->
      ! mexn .return() @(Value) Thunk({ ! interp env trace .compu() c })
    end
  | .compu() -> fn sc ->
    match sc
    | Lam(x, sc) ->
      comatch
      | .app() -> fn v ->
        ! interp { ! env .extend() x v } trace .compu() sc
      | .bind() -> ! mexn-err .fail() @(Value) TypeError()
      end
    | App(sc, sv) ->
      let trace': Trace = Cons(App(sc), trace) in
      let mv = { ! interp env trace' .value() sv } in
      ! malg .bindA() @(Value) mv { fn v -> ! interp env trace .compu() sc .app() v }
    | Ret(sv) ->
      comatch
      | .app() -> fn _ -> ! malg-err .failA() TypeError()
      | .bind() -> ! interp env trace .value() sv
      end
    | Bind(sc1, x, sc2) ->
      let trace': Trace = Cons(Bind(x, sc2), trace) in
      let mv = { ! interp env trace' .compu() sc1 .bind() } in
      ! malg .bindA() @(Value) mv { fn v ->
        ! interp { ! env .extend() x v } trace .compu() sc2
      }
    | Force(sv) ->
      let mv = { ! interp env trace .value() sv } in
      ! malg .bindA() @(Value) mv { fn v ->
        match v
        | Bool(_) -> ! malg-err .failA() TypeError()
        | Thunk(c) -> ! c
        end
      }
    | If(sv, c1, c2) ->
      let mv = { ! interp env trace .value() sv } in
      ! malg .bindA() @(Value) mv { fn v ->
        match v
        | Bool(b) ->
          match b
          | True() -> ! interp env trace .compu() c1
          | False() -> ! interp env trace .compu() c2
          end
        | Thunk(_) -> ! malg-err .failA() TypeError()
        end
      }
    | Env(sc) ->
      let mp: U (MExnOS Unit) = {
        comatch
        | .run() -> fn ka _ ->
          ! write_line "[[DEBUG]]" {
          ! write_str "[env]: " {
          ! env .print() {
          ! write_str "[trace]: " {
          ! print-trace trace {
          ! write_line "" {
          ! read_line { fn _ ->
          ! ka Unit()
          } } } } } } }
        end
      } in
      ! malg .bindA() @(Unit) mp { fn _ ->
        ! interp env trace .compu() sc
      }
    end
  end
end

main
  let env : U EnvO = { ! envo Empty() } in
  let fn report (e: Exception) : OS =
    match e
    | ParseError(loc, msg) ->
      do loc <- ! int_to_str loc;
      do loc <- ! str_append loc ": ";
      do msg <- ! str_append loc msg;
      ! panic msg
    | FreeVariable() -> ! panic "free variable"
    | TypeError() -> ! panic "type error"
    end
  in
  let fn value-eq (v1: Value) (v2: Value) (k: U OS) : OS =
    let bool-value-panic = { ! panic "wrong bool value" } in
    let thunk-panic = { ! panic "thunks are not comparable" } in
    match v1
    | Bool(b1) ->
      match v2
      | Bool(b2) ->
        do eq? <- ! bool_eq b1 b2;
        match eq?
        | True() -> ! write_line "\\^o^/" k
        | False() -> ! bool-value-panic
        end
      | Thunk(_) -> ! thunk-panic
      end
    | Thunk(_) -> ! thunk-panic
    end
  in
  let fn demo (term: SCompu) (ans: Value) (k: U OS): OS =
    ! interp env Nil() .compu() term .bind() .run() {
      fn v -> ! value-eq v ans k
    } report
  in
  // if true then ret true else ret false
  let term1: SCompu = If(Bool(True()), Ret(Bool(True())), Ret(Bool(False()))) in
  let ans1: Value = Bool(True()) in
  // (do x <- ret True in \b -> if b then x else false) True
  let term2: SCompu = App(Bind(
    Env(Ret(Bool(True()))), "x", Env(Lam("b", If(Var("b"), Ret(Var("x")), Ret(Bool(False())))))
  ), Bool(True())) in
  let ans2: Value = Bool(True()) in
  ! demo term1 ans1 {
  ! demo term2 ans2 {
  ! exit 0 }}
end
