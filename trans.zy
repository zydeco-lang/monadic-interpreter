codata Monad (M: VType -> CType) where
  | .return(): forall (A: VType) . A -> M A
  | .bind(): forall (A: VType) (A': VType) . U (M A) -> U (A -> M A') -> M A'
end

codata MonadTrans (T: (VType -> CType) -> VType -> CType) where
  | .lift(): forall (M: VType -> CType) (A: VType) . U (Monad M) -> U (M A) -> T M A
end

codata ReaderT (R: VType) (M: VType -> CType) (A: VType) where
  | .run(): R -> M A
end

def fn reader_t_monad (R: VType) (M: VType -> CType) (mo: U (Monad M)) : Monad (ReaderT R M) =
  comatch
  | .return() -> fn A a ->
    // goal: ReaderT R M A
    comatch
    | .run() -> fn _ -> ! mo .return() @(A) a
    end
  | .bind() -> fn A A' m f -> // m: U (ReaderT R M A), f: U (A -> ReaderT R M A')
    // goal: ReaderT R M A'
    comatch
    | .run() -> fn r ->
      ! mo .bind() @(A) @(A') { ! m .run() r } { fn a ->
        ! f a .run() r
      }
    end
  end
end

def fn reader_t_trans (R: VType) : MonadTrans (ReaderT R) =
  comatch
  | .lift() -> fn M A (mo: U (Monad M)) (m: U (M A)) ->
    // goal: ReaderT R M A
    comatch
    | .run() -> fn _ -> ! m
    // basically ignoring the reader input
    end
  end
end

codata OptionT (M: VType -> CType) (A: VType) where
  | .run(): M (Option A)
end

def fn option_t_monad (M: VType -> CType) (mo: U (Monad M)) : Monad (OptionT M) =
  comatch
  | .return() -> fn A a ->
    // goal: OptionT M A
    comatch
    | .run() -> ! mo .return() @(Option A) Some(a)
    end
  | .bind() -> fn A A' m f -> // m: U (OptionT M A), f: U (A -> OptionT M A')
    // goal: OptionT M A'
    comatch
    | .run() -> ! mo .bind() @(Option A) @(Option A') { ! m .run() } { fn a? ->
      match a?
      | Some(a) -> ! f a .run()
      | None() -> ! mo .return() @(Option A') None()
      end
    }
    end
  end
end

def fn option_t_trans : MonadTrans OptionT =
  comatch
  | .lift() -> fn M A mo m ->
    comatch
    | .run() -> ! mo .bind() @(A) @(Option A) m { fn a ->
      ! mo .return() @(Option A) Some(a)
    }
    end
  end
end

main
  ! exit 0
end
